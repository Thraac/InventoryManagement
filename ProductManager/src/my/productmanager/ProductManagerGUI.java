/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.productmanager;
import productmanager.*;
import javax.swing.table.*;
import java.util.ArrayList;
import java.io.*;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.*;


public class ProductManagerGUI extends javax.swing.JFrame {
    /**
     * Creates new form ProductManagerGUI
     */
    public ProductManagerGUI() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        ProductInformationPane = new javax.swing.JPanel();
        ProductNameLabel = new javax.swing.JLabel();
        ProductNameTextField = new javax.swing.JTextField();
        ProductDescriptionLabel = new javax.swing.JLabel();
        ProductDescriptionTextField = new javax.swing.JTextField();
        ProductPriceLabel = new javax.swing.JLabel();
        ProductPriceTextField = new javax.swing.JTextField();
        ProductQuantityLabel = new javax.swing.JLabel();
        ProductQuantityTextField = new javax.swing.JTextField();
        ProductIDLabel = new javax.swing.JLabel();
        ProductIDTextField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        DisplayPane = new javax.swing.JScrollPane();
        DisplayTable = new javax.swing.JTable();
        EditButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Product Management");

        ProductInformationPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Product Information"));
        ProductInformationPane.setToolTipText("");
        ProductInformationPane.setName(""); // NOI18N

        ProductNameLabel.setText("Product Name");

        ProductNameTextField.setName("ProductNameField"); // NOI18N
        ProductNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNameTextFieldActionPerformed(evt);
            }
        });

        ProductDescriptionLabel.setText("Product Description");

        ProductDescriptionTextField.setName("ProductDescriptionField"); // NOI18N
        ProductDescriptionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductDescriptionTextFieldActionPerformed(evt);
            }
        });

        ProductPriceLabel.setText("Product Price");

        ProductPriceTextField.setName("ProductPriceField"); // NOI18N
        ProductPriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductPriceTextFieldActionPerformed(evt);
            }
        });

        ProductQuantityLabel.setText("Product Quantity");

        ProductQuantityTextField.setName("ProductQuantityField"); // NOI18N
        ProductQuantityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductQuantityTextFieldActionPerformed(evt);
            }
        });

        ProductIDLabel.setText("Product ID");

        ProductIDTextField.setName("ProductNameField"); // NOI18N
        ProductIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductIDTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductInformationPaneLayout = new javax.swing.GroupLayout(ProductInformationPane);
        ProductInformationPane.setLayout(ProductInformationPaneLayout);
        ProductInformationPaneLayout.setHorizontalGroup(
            ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductInformationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductDescriptionLabel)
                    .addComponent(ProductNameLabel)
                    .addComponent(ProductPriceLabel)
                    .addComponent(ProductQuantityLabel)
                    .addComponent(ProductIDLabel))
                .addGap(18, 18, 18)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        ProductInformationPaneLayout.setVerticalGroup(
            ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductInformationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductQuantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        DisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Description", "Price", "Quantity"
            }
        ));
        DisplayPane.setViewportView(DisplayTable);

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ProductInformationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ProductInformationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RemoveButton)
                            .addComponent(AddButton)
                            .addComponent(EditButton)
                            .addComponent(SearchButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ProductInformationPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProductNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductNameTextFieldActionPerformed

    private void ProductDescriptionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductDescriptionTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductDescriptionTextFieldActionPerformed

    private void ProductPriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductPriceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductPriceTextFieldActionPerformed

    private void ProductQuantityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductQuantityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductQuantityTextFieldActionPerformed

    // add in the ADD button
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        
        try {
            // gets the details and adds them to the arraylist
            String newName = ProductNameTextField.getText();
            String newDescription = ProductDescriptionTextField.getText();
            double newPrice = Double.parseDouble(ProductPriceTextField.getText());
            int newQuantity = Integer.parseInt(ProductQuantityTextField.getText());
            
            MySQLManager.addToDatabase(newName, newDescription, newPrice,newQuantity);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(errors, "Failed to add product\n" + 
                    "Please fill out all forms before adding a product\n\n"
                    + "Name should be a word\n" + 
                    "Description should be a few words\n"
                    + "Price should be a decimal\n" + "Quantity should be a number");
        }
        newAddProductsToTable();
        clearFields();
    }//GEN-LAST:event_AddButtonActionPerformed

    private void ProductIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductIDTextFieldActionPerformed
   
    // This is the REMOVE button
    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        removeFromDatabase();
        newAddProductsToTable();
        clearFields();
    }//GEN-LAST:event_RemoveButtonActionPerformed

    // This is the EDIT button
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        updateDatabase();
        clearFields();
        newAddProductsToTable();
    }//GEN-LAST:event_EditButtonActionPerformed
    
    // This is the Search button
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        searchDatabase();
        clearFields();
    }//GEN-LAST:event_SearchButtonActionPerformed
    
    // GUI
    ArrayList<Product> tempProduct = ProductManager.getProductTable();
    static ProductManagerGUI newGUI = new ProductManagerGUI();
    DefaultTableModel model = null;
    JFrame errors = new JFrame();
    
    // Set up connections
    static String myDriver = "java.sql.Driver";
    static String myUrl = "jdbc:mysql://localhost:3306/mysql";
    static String thePassword = Secrets.getPass();
    static String theUser = "root";

    
    
    // clears the text fields     
    public void clearFields() {
        // takes all the textfields and blanks them
        ProductNameTextField.setText("");
        ProductDescriptionTextField.setText("");
        ProductPriceTextField.setText("");
        ProductQuantityTextField.setText("");
        ProductIDTextField.setText("");
    }
    
    public void newAddProductsToTable(){
        try {
            Class.forName(myDriver);  
            Connection conn = DriverManager.getConnection(myUrl, theUser, thePassword);
            Statement st = conn.createStatement();   
                        
            String control = "SELECT * FROM ProductTable;";
            ResultSet rs = st.executeQuery(control);
            
            model = (DefaultTableModel) DisplayTable.getModel();
            model.setRowCount(0);
                        
            while (rs.next()){
                int productId = Integer.parseInt(rs.getString("productId"));
                String productName = rs.getString("productName");
                String productDescription = rs.getString("productDescription");
                double productPrice = Double.parseDouble(rs.getString("productPrice"));
                int productQuantity = Integer.parseInt(rs.getString("productQuantity"));
                Object[] productToAddToTable = {productId, productName, productDescription, productPrice, productQuantity};
                model.addRow(productToAddToTable);
            }             
            conn.close();
        }
        catch (Exception e){
            System.err.println("Error loading data");
            System.err.println(e.getMessage());  
        } 
    }
    
    public void searchDatabase(){
        String holdInputString = ProductIDTextField.getText();
        if (holdInputString.isEmpty()){
            newAddProductsToTable();
        } 
        else {  
            try {
                Class.forName(myDriver);  
                Connection conn = DriverManager.getConnection(myUrl, theUser, thePassword);
                Statement st = conn.createStatement();  
                int searchedNumber = Integer.parseInt(holdInputString);

                String search = String.format("SELECT * FROM ProductTable WHERE ProductTable.`productId` = '%d';", searchedNumber);
                ResultSet rs = st.executeQuery(search);

                model = (DefaultTableModel) DisplayTable.getModel();
                model.setRowCount(0);

                if(rs.next()){
                    int productId = Integer.parseInt(rs.getString("productId"));
                    String productName = rs.getString("productName");
                    String productDescription = rs.getString("productDescription");
                    double productPrice = Double.parseDouble(rs.getString("productPrice"));
                    int productQuantity = Integer.parseInt(rs.getString("productQuantity"));

                    Object[] productToAddToTable = {productId, productName, productDescription, productPrice, productQuantity};
                    model.addRow(productToAddToTable);
                }
                if(model.getRowCount() == 0){
                    JOptionPane.showMessageDialog(errors, "Failed to find the item searched");
                    newAddProductsToTable();
                }
                conn.close();
            }
            catch (Exception e) {
                System.err.println("Error searching data");
                System.err.println(e.getMessage()); 
            }
        }
    } 
    
    public void removeFromDatabase(){
        String holdInputString = ProductIDTextField.getText();
        if(holdInputString.isEmpty()){
            JOptionPane.showMessageDialog(errors, "You did not input an ID.");
        }
        else {
            try{
                Class.forName(myDriver);  
                Connection conn = DriverManager.getConnection(myUrl, theUser, thePassword);
                Statement st = conn.createStatement();  
                int searchedNumber = Integer.parseInt(holdInputString);

                String search = String.format("DELETE FROM ProductTable WHERE ProductTable.`productId` = '%d';", searchedNumber);
                st.executeUpdate(search);
                
                model = (DefaultTableModel) DisplayTable.getModel(); 
                conn.close();
            }
            catch (Exception e){
                System.err.println("Error searching data");
                System.err.println(e.getMessage()); 
            }
            
        }
    }
    
    public void updateDatabase(){
        // get the new data
        int searchedNumber = Integer.parseInt(ProductIDTextField.getText());
        String newName = ProductNameTextField.getText();
        String newDescription = ProductDescriptionTextField.getText();
        double newPrice = Double.parseDouble(ProductPriceTextField.getText());
        int newQuantity = Integer.parseInt(ProductIDTextField.getText());
        
        try {
            // makes the connection and the update
            Class.forName(myDriver);  
            Connection conn = DriverManager.getConnection(myUrl, theUser, thePassword);
            Statement st = conn.createStatement();  
            
            String search = String.format("UPDATE ProductTable SET productName = '%s',"
                    + " productDescription = '%s', productPrice = %.2f,"
                    + " productQuantity = %d WHERE ProductTable.`productId` = %d;",
                    newName, newDescription, newPrice, newQuantity, searchedNumber);
            st.executeUpdate(search);

            model = (DefaultTableModel) DisplayTable.getModel(); 
            conn.close();
        }             
        catch (Exception e){
            System.err.println("Error loading data");
            System.err.println(e.getMessage());  
        }         
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                newGUI.setVisible(true);
                newGUI.newAddProductsToTable();
            }
            
        });

        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JScrollPane DisplayPane;
    private javax.swing.JTable DisplayTable;
    private javax.swing.JButton EditButton;
    private javax.swing.JLabel ProductDescriptionLabel;
    private javax.swing.JTextField ProductDescriptionTextField;
    private javax.swing.JLabel ProductIDLabel;
    private javax.swing.JTextField ProductIDTextField;
    private javax.swing.JPanel ProductInformationPane;
    private javax.swing.JLabel ProductNameLabel;
    private javax.swing.JTextField ProductNameTextField;
    private javax.swing.JLabel ProductPriceLabel;
    private javax.swing.JTextField ProductPriceTextField;
    private javax.swing.JLabel ProductQuantityLabel;
    private javax.swing.JTextField ProductQuantityTextField;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
