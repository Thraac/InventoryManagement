/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.productmanager;
import productmanager.*;
import javax.swing.table.*;
import java.util.ArrayList;
import java.io.*;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import javax.swing.*;


public class ProductManagerGUI extends javax.swing.JFrame {
    /**
     * Creates new form ProductManagerGUI
     */
    public ProductManagerGUI() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProductInformationPane = new javax.swing.JPanel();
        ProductNameLabel = new javax.swing.JLabel();
        ProductNameTextField = new javax.swing.JTextField();
        ProductDescriptionLabel = new javax.swing.JLabel();
        ProductDescriptionTextField = new javax.swing.JTextField();
        ProductPriceLabel = new javax.swing.JLabel();
        ProductPriceTextField = new javax.swing.JTextField();
        ProductQuantityLabel = new javax.swing.JLabel();
        ProductQuantityTextField = new javax.swing.JTextField();
        ProductIDLabel = new javax.swing.JLabel();
        ProductIDTextField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        DisplayPane = new javax.swing.JScrollPane();
        DisplayTable = new javax.swing.JTable();
        EditButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Product Management");

        ProductInformationPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Product Information"));
        ProductInformationPane.setToolTipText("");
        ProductInformationPane.setName(""); // NOI18N

        ProductNameLabel.setText("Product Name");

        ProductNameTextField.setName("ProductNameField"); // NOI18N
        ProductNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductNameTextFieldActionPerformed(evt);
            }
        });

        ProductDescriptionLabel.setText("Product Description");

        ProductDescriptionTextField.setName("ProductDescriptionField"); // NOI18N
        ProductDescriptionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductDescriptionTextFieldActionPerformed(evt);
            }
        });

        ProductPriceLabel.setText("Product Price");

        ProductPriceTextField.setName("ProductPriceField"); // NOI18N
        ProductPriceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductPriceTextFieldActionPerformed(evt);
            }
        });

        ProductQuantityLabel.setText("Product Quantity");

        ProductQuantityTextField.setName("ProductQuantityField"); // NOI18N
        ProductQuantityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductQuantityTextFieldActionPerformed(evt);
            }
        });

        ProductIDLabel.setText("Product ID");

        ProductIDTextField.setName("ProductNameField"); // NOI18N
        ProductIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductIDTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductInformationPaneLayout = new javax.swing.GroupLayout(ProductInformationPane);
        ProductInformationPane.setLayout(ProductInformationPaneLayout);
        ProductInformationPaneLayout.setHorizontalGroup(
            ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductInformationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductDescriptionLabel)
                    .addComponent(ProductNameLabel)
                    .addComponent(ProductPriceLabel)
                    .addComponent(ProductQuantityLabel)
                    .addComponent(ProductIDLabel))
                .addGap(18, 18, 18)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProductIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        ProductInformationPaneLayout.setVerticalGroup(
            ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProductInformationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductDescriptionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductInformationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProductQuantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ProductQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        DisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Description", "Price", "Quantity"
            }
        ));
        DisplayPane.setViewportView(DisplayTable);

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ProductInformationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EditButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ProductInformationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RemoveButton)
                            .addComponent(AddButton)
                            .addComponent(EditButton)
                            .addComponent(SearchButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ProductInformationPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProductNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductNameTextFieldActionPerformed

    private void ProductDescriptionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductDescriptionTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductDescriptionTextFieldActionPerformed

    private void ProductPriceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductPriceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductPriceTextFieldActionPerformed

    private void ProductQuantityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductQuantityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductQuantityTextFieldActionPerformed

    // add in the ADD button
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        
        try {
            String newName = ProductNameTextField.getText();
            String newDescription = ProductDescriptionTextField.getText();
            double newPrice = Double.parseDouble(ProductPriceTextField.getText());
            int newQuantity = Integer.parseInt(ProductQuantityTextField.getText());
            int newID = Integer.parseInt(ProductIDTextField.getText());

            ProductManager.addProduct(newID, newName, newDescription, newPrice, 
                    newQuantity);
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(errors, "Failed to add product\n" + 
                    "Please fill out all forms before adding a product\n\n"
                    + "ID should be a number\n" + "Name should be a word\n" + 
                    "Description should be a few words\n"
                    + "Price should be a decimal\n" + "Quantity should be a number");
        }
        
        clearFields();
        addProductsToTable();
        DisplayTable.invalidate();
        DisplayTable.repaint(); 
    }//GEN-LAST:event_AddButtonActionPerformed

    private void ProductIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProductIDTextFieldActionPerformed
   
    // This is the REMOVE button
    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed

        try {
            int ID = Integer.parseInt(ProductIDTextField.getText());
            model = (DefaultTableModel) DisplayTable.getModel();
            Product holdProduct = null;
            int counter = -1; 
            
            for (Product product: tempProduct) {
                counter++;
                int holdID = product.getProductID();
                if (holdID == ID) {
                    holdProduct = product;
                    model.removeRow(counter);
                }
            }
            // removes it from the table, and removes it from the file if program closes
            tempProduct.remove(holdProduct);
            
        } catch (Exception e){
            JOptionPane.showMessageDialog(errors, "Please enter the ID number of the item you would like to remove.");
        }

        ProductManager.betterWriteToFile();
        clearFields();       
        DisplayTable.invalidate();
        DisplayTable.repaint(); 
    }//GEN-LAST:event_RemoveButtonActionPerformed

    // This is the EDIT button
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        // TODO add your handling code here:
        try {
            model = (DefaultTableModel) DisplayTable.getModel();
            Product holdProduct = null;
            int counter = -1;
            // gets input data
            String newName = ProductNameTextField.getText();
            String newDescription = ProductDescriptionTextField.getText();
            double newPrice = Double.parseDouble(ProductPriceTextField.getText());
            int newQuantity = Integer.parseInt(ProductQuantityTextField.getText());
            int newID = Integer.parseInt(ProductIDTextField.getText());
            // goes through list looking for ID
            for (Product product : tempProduct){
                
                counter++;                
                int holdID = product.getProductID();
                // removes data
                if (holdID == newID) {
                    holdProduct = product;
                    model.removeRow(counter);  
                }  
            }
            // actually makes the remove and the add 
            tempProduct.remove(holdProduct);
            ProductManager.addProduct(newID, newName, newDescription, newPrice, newQuantity);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(errors, "In order to edit an item, please enter the right item ID.\n" + 
                    "As well as have all other fields filled out with the information you want the item to have.");
            System.out.print(e);
        }
        
        clearFields();
        addProductsToTable();
        DisplayTable.invalidate();
        DisplayTable.repaint();
    }//GEN-LAST:event_EditButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        String holdInputString = ProductIDTextField.getText();
        model = (DefaultTableModel) DisplayTable.getModel();
        
        
        if (holdInputString.isEmpty()) {
            addProductsToTable();
        }
        
        else {
            int holdInputInt = Integer.parseInt(holdInputString);
            for (Product product: tempProduct) {
                
                if (product.getProductID() == holdInputInt) {
                    
                    Object[] productToAdd = {product.getProductID(), product.getProductName(),
                        product.getProductDescription(), product.getProductPrice(),
                        product.getProductQuantity()};
                    
                    model.setNumRows(0);
                    model.addRow(productToAdd);
                }
            }   
        }
        ProductIDTextField.setText("");
    }//GEN-LAST:event_SearchButtonActionPerformed
    
    ArrayList<Product> tempProduct = ProductManager.getProductTable();
    static ProductManagerGUI newGUI = new ProductManagerGUI();
    DefaultTableModel model = null;
    JFrame errors = new JFrame();
    
    // clears the text fields     
    public void clearFields() {
        
        ProductNameTextField.setText("");
        ProductDescriptionTextField.setText("");
        ProductPriceTextField.setText("");
        ProductQuantityTextField.setText("");
        ProductIDTextField.setText("");
    }

    // this is the one that affects the add button    
    public void addProductsToTable(){
        
        model = (DefaultTableModel) DisplayTable.getModel();
        model.setRowCount(0);
        
        for (Product product : tempProduct) {
            Object[] productToAdd = {product.getProductID(), product.getProductName(),
                product.getProductDescription(), product.getProductPrice(),
                product.getProductQuantity()};
            model.addRow(productToAdd);
            ProductManager.sortID(tempProduct);
            DisplayTable.invalidate();
            DisplayTable.repaint();  
            productmanager.ProductManager.betterWriteToFile();
        }
    }
    
    // this is for loading files on launch
    public void betterLoadFiles(){
        
        model = (DefaultTableModel) DisplayTable.getModel();
        
        try {
            // file loading from
            FileInputStream fileStream = new FileInputStream("InventoryData.txt");
            ObjectInputStream loadedObjStream = new ObjectInputStream(fileStream); 
            boolean cont = true;
            
            // this loads all the data from the file and turns it back into Product
            try {
                while (cont) {
                    Product loadedProduct = (Product) loadedObjStream.readObject();
                    if (loadedProduct != null) {
                        tempProduct.add(loadedProduct);
                    } else {
                        cont = false;
                    }
                }
            } catch (Exception e) {
                System.out.print(e);
                
            }
            
            // this adds everything back into the table
            for (Product product: tempProduct) {
                Object[] productToAdd = {product.getProductID(), product.getProductName(),
                    product.getProductDescription(), product.getProductPrice(),
                    product.getProductQuantity()};

                model.addRow(productToAdd);
                productmanager.ProductManager.betterWriteToFile();
            }
            
            loadedObjStream.close();
            DisplayTable.invalidate();
            DisplayTable.repaint();  

        } catch (Exception e){
            e.getStackTrace();
            System.out.print(e);
            JOptionPane.showMessageDialog(errors, e);
        }
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                newGUI.setVisible(true);
                newGUI.betterLoadFiles();
            }
            
        });

        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JScrollPane DisplayPane;
    private javax.swing.JTable DisplayTable;
    private javax.swing.JButton EditButton;
    private javax.swing.JLabel ProductDescriptionLabel;
    private javax.swing.JTextField ProductDescriptionTextField;
    private javax.swing.JLabel ProductIDLabel;
    private javax.swing.JTextField ProductIDTextField;
    private javax.swing.JPanel ProductInformationPane;
    private javax.swing.JLabel ProductNameLabel;
    private javax.swing.JTextField ProductNameTextField;
    private javax.swing.JLabel ProductPriceLabel;
    private javax.swing.JTextField ProductPriceTextField;
    private javax.swing.JLabel ProductQuantityLabel;
    private javax.swing.JTextField ProductQuantityTextField;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SearchButton;
    // End of variables declaration//GEN-END:variables
}
